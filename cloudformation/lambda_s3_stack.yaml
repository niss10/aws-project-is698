AWSTemplateFormatVersion: '2010-09-09'
Description: S3-triggered Lambda function that logs file upload events

Parameters:
  EnvironmentName:
    Type: String
    Default: dev

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'scalable-logs-bucket-${EnvironmentName}'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub lambda-s3-logging-role-${EnvironmentName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: s3-logger-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: "*"

  S3UploadLoggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub s3-upload-logger-${EnvironmentName}
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 10
      Code:
        ZipFile: |
          import json
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              try:
                  record = event['Records'][0]
                  bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  log_message = f"New file uploaded: {key} in bucket: {bucket}"
                  logger.info(log_message)
                  return {
                      "statusCode": 200,
                      "body": json.dumps(log_message)
                  }
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      "statusCode": 500,
                      "body": json.dumps(f"Error: {str(e)}")
                  }

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3UploadLoggerFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt S3Bucket.Arn

Outputs:
  S3BucketName:
    Value: !Ref S3Bucket
    Description: Name of the S3 bucket for uploads
  LambdaFunctionName:
    Value: !Ref S3UploadLoggerFunction
    Description: Name of the Lambda function
