1. Deploy cloudFormationStack
aws cloudformation create-stack \
  --stack-name ec2-alb-stack \
  --template-body file://cloudformation/ec2_alb_stack.yaml \
  --capabilities CAPABILITY_NAMED_IAM \
  --parameters \
    ParameterKey=VPCId,ParameterValue=<VPC_ID> \
    ParameterKey=PublicSubnetId1,ParameterValue=<SUBNET_1_ID> \
    ParameterKey=PublicSubnetId2,ParameterValue=<SUBNET_2_ID> \
    ParameterKey=ALBSecurityGroupId,ParameterValue=<ALB_SG_ID> \
    ParameterKey=EC2SecurityGroupId,ParameterValue=<EC2_SG_ID>

2. Deploy RDS stack
aws cloudformation create-stack \
  --stack-name rds-stack \
  --template-body file://cloudformation/rds_stack.yaml \
  --capabilities CAPABILITY_NAMED_IAM \
  --parameters \
    ParameterKey=VPCId,ParameterValue=<VPC_ID> \
    ParameterKey=PrivateSubnetId,ParameterValue=<PRIVATE_SUBNET_1_ID> \
    ParameterKey=PrivateSubnetId2,ParameterValue=<PRIVATE_SUBNET_2_ID> \
    ParameterKey=RDSSecurityGroupId,ParameterValue=<RDS_SG_ID> \
    ParameterKey=DBUsername,ParameterValue=admin \
    ParameterKey=DBPassword,ParameterValue=YourSecurePassword123 \
    ParameterKey=DBName,ParameterValue=appdb

3. Deploy Lambdafunction and S3 bucket
aws cloudformation create-stack \
  --stack-name lambda-s3-logging \
  --template-body file://cloudformation/lambda_s3_stack.yaml \
  --capabilities CAPABILITY_NAMED_IAM \
  --parameters ParameterKey=EnvironmentName,ParameterValue=dev

4. Delete stack
aws cloudformation delete-stack --stack-name lambda-s3-logging


=========================================================================
Use AWS CLI to Interact with EC2, S3, and Lambda
==========================================================================
1. List all S3 buckets
aws s3 ls


2. Upload a file to the S3 bucket
echo "Hello from CLI!" > cli-upload.txt
aws s3 cp cli-upload.txt s3://scalable-logs-bucket-dev/

3. List running EC2 instances
aws ec2 describe-instances \
  --filters "Name=instance-state-name,Values=running" \
  --query "Reservations[*].Instances[*].[InstanceId,InstanceType,PrivateIpAddress,State.Name]" \
  --output table

 4. Invoke the Lambda function manually
 aws lambda invoke \
  --function-name s3-upload-logger-dev \
  --payload '{}' \
  output.json